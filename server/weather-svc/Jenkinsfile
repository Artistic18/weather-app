pipeline {
    agent any

    environment {
        AWS_REGION = 'us-east-1'              
        ECR_REPO_NAME = 'sapient/weather-repo'          
        IMAGE_TAG = "weather-cache-latest"                   
        EC2_IP = '54.175.96.105' 
        EC2_USER = 'ec2-user'      
        AWS_ACCOUNT_ID = '127577525529'
        JAVA_HOME = '/usr/lib/jvm/java-21-amazon-corretto'
        PATH = "${JAVA_HOME}/bin:${env.PATH}"      
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'release', url: 'https://github.com/Artistic18/weather-app.git'
            }
        }

        stage('Check Maven Version') {
            steps {
                sh 'mvn -v'
            }
        }

       stage('Build Project') {
            steps {
                script {
                    dir('server/weather-cache-service') {
                        sh """
                        echo "Running Maven build in server/weather-cache-service"
                        mvn clean install
                        """
                    }
                }
            }
        }

        stage('Verify Target Directory') {
            steps {
                script {
                    dir('server/weather-cache-service') {
                        sh """
                        echo "Verifying target directory..."
                        ls -l target || echo "ERROR: Target directory or JAR file not found!"
                        """
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    dir('server/weather-cache-service') { 
                        sh """
                        # Verify the JAR file exists
                        if [ ! -f target/weather-cache-service-0.0.1-SNAPSHOT.jar ]; then
                            echo "ERROR: JAR file not found in the target directory!"
                            exit 1
                        fi

                        # Build the Docker image
                        docker build -t ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO_NAME}:${IMAGE_TAG} .
                        """
                    }
                }
            }
        }

        stage('Login to Amazon ECR') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'aws-credentials', usernameVariable: 'AWS_ACCESS_KEY_ID', passwordVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                        sh """
                        aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
                        aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
                        aws configure set region $AWS_REGION
                        aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com
                        """
                    }
                }
            }
        }

        stage('Push to ECR') {
            steps {
                script {
                    sh """
                    docker tag ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO_NAME}:${IMAGE_TAG} ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO_NAME}:${IMAGE_TAG}
                    docker push ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO_NAME}:${IMAGE_TAG}
                    """
                }
            }
        }

        stage('Deploy to EC2') {
            steps {
                script {
                    sshagent(credentials: ['ec2-ssh-key']) {
                        sh """
                            # Stop and remove any container using port 8082
                            ssh ${EC2_USER}@${EC2_IP} '
                                container_id=\$(docker ps -q -f "publish=8082")
                                if [ -n "\$container_id" ]; then
                                    echo "Stopping and removing container running on port 8082..."
                                    docker stop \$container_id
                                    docker rm \$container_id
                                else
                                    echo "No container running on port 8082"
                                fi
                            '
                            
                            # Pull the latest image from ECR
                            aws ecr get-login-password --region ${AWS_REGION} | ssh ${EC2_USER}@${EC2_IP} 'docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com'

                            # Pull the Docker image and run it on port 8081
                            ssh ${EC2_USER}@${EC2_IP} '
                                docker pull ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO_NAME}:${IMAGE_TAG} && \
                                docker run -d -p 8082:8082 ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO_NAME}:${IMAGE_TAG}
                            '
                        """
                    }
                }
            }
        }
    }

    post {
        always {
            echo 'Pipeline execution completed.'
        }
        success {
            echo 'Pipeline executed successfully.'
        }
        failure {
            echo 'Pipeline execution failed.'
        }
    }
}
